{"version":3,"sources":["Components/imdbLogo.png","Components/SearchHeader.jsx","Redux/searchActions.js","constants.js","Components/Item.jsx","Components/ItemList.jsx","Components/fetchItems.js","Redux/searchReducer.js","Redux/rootReducer.js","Redux/Store.js","Components/DisplayItem.jsx","Components/getDisplayItem.js","Main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","connect","state","search","updateSearch","type","payload","props","document","querySelector","useState","option","setOption","console","log","className","placeholder","onChange","e","target","value","API_KEY","Item","item","posterUrl","poster_path","to","id","src","alt","original_title","original_name","vote_average","class","overview","length","substring","items","setItems","useEffect","a","async","fetchURL","fetch","res","json","data","getItems","then","results","render","map","initialState","searchReducer","action","combineReducers","middlewares","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","match","params","setItem","loading","setLoading","getDisplayItem","bg","backgroundImage","backdrop_path","backgroundSize","style","title","name","release_date","first_air_date","runtime","episode_run_time","genres","i","budget","parseInt","toFixed","replace","number_of_seasons","revenue","number_of_episodes","status","Main","App","exact","path","component","DisplayItem","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03ff628b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imdbLogo.ce735fa5.png\";","import React, { useState } from \"react\";\r\nimport \"./Header.scss\";\r\nimport { updateSearch } from \"./../Redux/searchActions\";\r\nimport { connect } from \"react-redux\";\r\nfunction SearchHeader(props) {\r\n  const { search, updateSearch } = props;\r\n  const type = document.querySelector(\".type\");\r\n\r\n  const [option, setOption] = useState(\"movie\");\r\n  const handleSearchChange = e => {\r\n    updateSearch({\r\n      search: e.target.value,\r\n      type: option\r\n    });\r\n  };\r\n\r\n  console.log(option);\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter query\"\r\n          onChange={handleSearchChange}\r\n          value={search}\r\n        />\r\n        <select\r\n          className=\"type\"\r\n          value={option}\r\n          onChange={e => setOption(e.target.value)}\r\n        >\r\n          <option value=\"movie\">Movies</option>\r\n          <option value=\"tv\">TV shows</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    search: state.search.search\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateSearch })(SearchHeader);\r\n","export const updateSearch = search => {\r\n  return {\r\n    type: \"UPDATE_SEARCH\",\r\n    payload: search\r\n  };\r\n};\r\n","export const API_KEY = `703ac816c773f8b25783f5e974d722a3`;\r\n","import React from \"react\";\r\nimport \"./Item.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Item({ item }) {\r\n  const posterUrl = item.poster_path\r\n    ? `https://image.tmdb.org/t/p/original/${item.poster_path}`\r\n    : \"http://www.csaff.org/wp-content/uploads/csaff-no-poster.jpg\";\r\n\r\n  return (\r\n    <Link to={`/display/${item.id}`}>\r\n      <div className=\"item-container\">\r\n        <div className=\"poster-container\">\r\n          <img src={posterUrl} className=\"poster-img\" alt=\"poster\" />\r\n        </div>\r\n        <div className=\"item-title-container\">\r\n          <p className=\"item-title\">\r\n            {item.original_title ? item.original_title : item.original_name}\r\n          </p>\r\n          <p className=\"item-vote\">\r\n            {item.vote_average} <i class=\"fas fa-star\"></i>\r\n          </p>\r\n        </div>\r\n        <p className=\"item-desc\">\r\n          {item.overview.length > 100\r\n            ? item.overview.substring(0, 100) + \"...\"\r\n            : item.overview.length == 0\r\n            ? \"No overview available\"\r\n            : item.overview}\r\n        </p>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./ItemList.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItems } from \"./fetchItems\";\r\nimport Item from \"./Item\";\r\n\r\nfunction ItemList({ search, type }) {\r\n  const [items, setItems] = useState([]);\r\n  useEffect(() => {\r\n    if (search.length > 0) {\r\n      getItems(search, type).then(data => {\r\n        setItems(data.results);\r\n      });\r\n    }\r\n  }, [search, type]);\r\n  console.log(items);\r\n  const render =\r\n    items.length > 0 &&\r\n    items.map(item => {\r\n      return <Item item={item} />;\r\n    });\r\n  return (\r\n    <div className=\"list\">\r\n      <div className=\"list-container\">{render}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    search: state.search.search,\r\n    type: state.search.type\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ItemList);\r\n","import { API_KEY } from \"./../constants\";\r\n\r\nexport const getItems = async (search, type = \"movie\") => {\r\n  const fetchURL = `https://api.themoviedb.org/3/search/${type}?api_key=${API_KEY}&language=en-US&query=${search}&page=1`;\r\n  let res = await fetch(fetchURL);\r\n\r\n  let data = await res.json();\r\n  // const movie = `https://api.themoviedb.org/3/movie/359724?api_key=${API_KEY}&language=en-US&query=${search}&page=1`;\r\n  // let res1 = await fetch(movie);\r\n  // let data1 = await res1.json();\r\n  // console.log(data1);\r\n  return data;\r\n};\r\n","const initialState = { search: \"\", type: \"movie\" };\r\n\r\nconst searchReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_SEARCH\":\r\n      return { search: action.payload.search, type: action.payload.type };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default searchReducer;\r\n","import searchReducer from \"./searchReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({ search: searchReducer });\r\n","import { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middlewares = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  {},\r\n  composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport default store;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./DisplayItem.scss\";\r\nimport { getDisplayItem } from \"./getDisplayItem\";\r\nimport imdbLogo from \"./imdbLogo.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nfunction DisplayItem(props) {\r\n  console.log(props.type);\r\n  let id = props.match.params.id;\r\n  const [item, setItem] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    getDisplayItem(id, props.type).then(data => {\r\n      setItem(data);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  const bg = {\r\n    backgroundImage: `linear-gradient(to bottom, rgba(0,0,0,0.6),rgba(0,0,0,0.8)),url(\"https://image.tmdb.org/t/p/original${item.backdrop_path}\")`,\r\n    backgroundSize: \"cover\"\r\n  };\r\n  console.log(item);\r\n\r\n  return (\r\n    <div>\r\n      {!loading && (\r\n        <div className=\"display-item-page\" style={item && bg}>\r\n          <div className=\"display-item-container\">\r\n            <div className=\"display-title-container\">\r\n              <p className=\"display-title\">\r\n                {item.title ? item.title : item.name}\r\n              </p>\r\n            </div>\r\n            <div className=\"display-flex\">\r\n              <div className=\"display-poster-container\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/original${item.poster_path}`}\r\n                  alt=\"poster\"\r\n                  className=\"display-poster\"\r\n                />\r\n              </div>\r\n              <div className=\"display-util\">\r\n                <p className=\"display-release\">\r\n                  {item.release_date ? (\r\n                    <span>Released on - {item.release_date}</span>\r\n                  ) : (\r\n                    <span> First air date - {item.first_air_date}</span>\r\n                  )}\r\n                </p>\r\n                <p className=\"display-rating\">\r\n                  {\" \"}\r\n                  Average Rating - <i class=\"fas fa-star\"></i>{\" \"}\r\n                  {item.vote_average}\r\n                </p>\r\n                <p className=\"display-runtime\">\r\n                  Runtime -{\" \"}\r\n                  {item.runtime ? (\r\n                    <span>{item.runtime} minutes</span>\r\n                  ) : (\r\n                    <span>{item.episode_run_time[0]}</span>\r\n                  )}{\" \"}\r\n                  minutes\r\n                </p>\r\n                {/* <p className=\"display-imdb\">\r\n                  IMDb Link -{\" \"}\r\n                  <a\r\n                    href={`https://imdb.com/title/${item.imdb_id}`}\r\n                    target=\"_blank\"\r\n                    alt=\"imdb\"\r\n                  >\r\n                    <img src={imdbLogo} className=\"imdb\" alt=\"png\"></img>\r\n                  </a>\r\n                </p> */}\r\n                <p className=\"display-genres\">\r\n                  Genres - [\r\n                  {item.genres.map(i => (\r\n                    <span>{i.name + \" \"}</span>\r\n                  ))}\r\n                  ]\r\n                </p>\r\n\r\n                <p className=\"display-overview\">\r\n                  Plot - <br />\r\n                  {item.overview}\r\n                </p>\r\n                <p className=\"display-budget\">\r\n                  {item.budget ? (\r\n                    <span>\r\n                      Budget - ${\" \"}\r\n                      {parseInt(item.budget)\r\n                        .toFixed(2)\r\n                        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\")}\r\n                    </span>\r\n                  ) : (\r\n                    <span>Number of seasons - {item.number_of_seasons}</span>\r\n                  )}\r\n                </p>\r\n                <p className=\"display-boxoffice\">\r\n                  {item.revenue ? (\r\n                    <span>\r\n                      {\" \"}\r\n                      Box-Office - $\r\n                      {parseInt(item.revenue)\r\n                        .toFixed(2)\r\n                        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\")}\r\n                    </span>\r\n                  ) : (\r\n                    <span>Number of episodes - {item.number_of_episodes}</span>\r\n                  )}\r\n                </p>\r\n                <p className=\"display-status\">\r\n                  {item.status && <span>Status - {item.status} </span>}\r\n                </p>\r\n                <Link to=\"/\">\r\n                  {\" \"}\r\n                  <button className=\"button\">Go Back</button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    type: state.search.type\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(DisplayItem);\r\n","import { API_KEY } from \"./../constants\";\r\n\r\nexport const getDisplayItem = async (id, type) => {\r\n  console.log(type);\r\n  const fetchURL = `https://api.themoviedb.org/3/${type}/${id}?api_key=${API_KEY}&language=en-US`;\r\n  console.log(fetchURL);\r\n  let res = await fetch(fetchURL);\r\n\r\n  let data = await res.json();\r\n  console.log(data);\r\n  // const movie = `https://api.themoviedb.org/3/movie/359724?api_key=${API_KEY}&language=en-US&query=${search}&page=1`;\r\n  // let res1 = await fetch(movie);\r\n  // let data1 = await res1.json();\r\n  // console.log(data1);\r\n  return data;\r\n};\r\n","import React from \"react\";\r\nimport SearchHeader from \"./Components/SearchHeader\";\r\nimport ItemList from \"./Components/ItemList\";\r\n\r\nexport default function Main() {\r\n  return (\r\n    <div>\r\n      <SearchHeader />\r\n      <ItemList />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport SearchHeader from \"./Components/SearchHeader\";\nimport ItemList from \"./Components/ItemList\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/Store\";\nimport DisplayItem from \"./Components/DisplayItem\";\nimport Main from \"./Main\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Switch>\n        <Route exact path=\"/\" component={Main} />\n        <Route exact path={`/display/:id`} component={DisplayItem} />\n      </Switch>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}