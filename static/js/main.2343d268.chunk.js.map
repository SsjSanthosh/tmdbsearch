{"version":3,"sources":["Components/SearchHeader.jsx","Redux/searchActions.js","constants.js","Components/Item.jsx","Components/ItemList.jsx","Components/fetchItems.js","Redux/searchReducer.js","Redux/rootReducer.js","Redux/Store.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","search","updateSearch","type","payload","props","document","querySelector","useState","option","setOption","console","log","className","placeholder","onChange","e","target","value","API_KEY","Item","item","posterUrl","poster_path","src","alt","original_title","original_name","vote_average","class","overview","length","substring","items","setItems","useEffect","a","async","fetchURL","fetch","res","json","data","getItems","then","results","render","map","initialState","searchReducer","action","combineReducers","middlewares","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2343d268.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Header.scss\";\r\nimport { updateSearch } from \"./../Redux/searchActions\";\r\nimport { connect } from \"react-redux\";\r\nfunction SearchHeader(props) {\r\n  const { search, updateSearch } = props;\r\n  const type = document.querySelector(\".type\");\r\n\r\n  const [option, setOption] = useState(\"movie\");\r\n  const handleSearchChange = e => {\r\n    updateSearch({\r\n      search: e.target.value,\r\n      type: option\r\n    });\r\n  };\r\n\r\n  console.log(option);\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter query\"\r\n          onChange={handleSearchChange}\r\n          value={search}\r\n        />\r\n        <select\r\n          className=\"type\"\r\n          value={option}\r\n          onChange={e => setOption(e.target.value)}\r\n        >\r\n          <option value=\"movie\">Movies</option>\r\n          <option value=\"tv\">TV shows</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    search: state.search.search\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateSearch })(SearchHeader);\r\n","export const updateSearch = search => {\r\n  return {\r\n    type: \"UPDATE_SEARCH\",\r\n    payload: search\r\n  };\r\n};\r\n","export const API_KEY = `703ac816c773f8b25783f5e974d722a3`;\r\n","import React from \"react\";\r\nimport \"./Item.scss\";\r\nexport default function Item({ item }) {\r\n  const posterUrl = item.poster_path\r\n    ? `https://image.tmdb.org/t/p/original/${item.poster_path}`\r\n    : \"http://www.csaff.org/wp-content/uploads/csaff-no-poster.jpg\";\r\n\r\n  return (\r\n    <div className=\"item-container\">\r\n      <div className=\"poster-container\">\r\n        <img src={posterUrl} className=\"poster-img\" alt=\"poster\" />\r\n      </div>\r\n      <div className=\"item-title-container\">\r\n        <p className=\"item-title\">\r\n          {item.original_title ? item.original_title : item.original_name}\r\n        </p>\r\n        <p className=\"item-vote\">\r\n          {item.vote_average} <i class=\"fas fa-star\"></i>\r\n        </p>\r\n      </div>\r\n      <p className=\"item-desc\">\r\n        {item.overview.length > 100\r\n          ? item.overview.substring(0, 100) + \"...\"\r\n          : item.overview.length == 0\r\n          ? \"No overview available\"\r\n          : item.overview}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./ItemList.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItems } from \"./fetchItems\";\r\nimport Item from \"./Item\";\r\n\r\nfunction ItemList({ search, type }) {\r\n  const [items, setItems] = useState([]);\r\n  useEffect(() => {\r\n    if (search.length > 0) {\r\n      getItems(search, type).then(data => {\r\n        setItems(data.results);\r\n      });\r\n    }\r\n  }, [search, type]);\r\n  console.log(items);\r\n  const render =\r\n    items.length > 0 &&\r\n    items.map(item => {\r\n      return <Item item={item} />;\r\n    });\r\n  return (\r\n    <div className=\"list\">\r\n      <div className=\"list-container\">{render}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    search: state.search.search,\r\n    type: state.search.type\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ItemList);\r\n","import { API_KEY } from \"./../constants\";\r\n\r\nexport const getItems = async (search, type = \"movie\") => {\r\n  const fetchURL = `https://api.themoviedb.org/3/search/${type}?api_key=${API_KEY}&language=en-US&query=${search}&page=1`;\r\n  let res = await fetch(fetchURL);\r\n\r\n  let data = await res.json();\r\n  return data;\r\n};\r\n","const initialState = { search: \"\", type: \"movie\" };\r\n\r\nconst searchReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_SEARCH\":\r\n      return { search: action.payload.search, type: action.payload.type };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default searchReducer;\r\n","import searchReducer from \"./searchReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({ search: searchReducer });\r\n","import { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middlewares = [thunk];\r\nconst store = createStore(\r\n  rootReducer,\r\n  {},\r\n  composeWithDevTools(applyMiddleware(...middlewares))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport SearchHeader from \"./Components/SearchHeader\";\nimport ItemList from \"./Components/ItemList\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/Store\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <SearchHeader />\n        <ItemList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}